#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/77acd586-78cd-4dbc-8bc8-1a394f1587f8 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudAcceleration accel_x;
  CloudAcceleration accel_y;
  CloudAcceleration accel_z;
  CloudElectricPotential sound;
  CloudLocation position;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <math.h>

Adafruit_MPU6050 mpu;
const int KY_037 = 34;


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  delay(500);
  Serial.println("Initialize");
  // Try to initialize!
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      Serial.println("Failed to find MPU6050 chip");
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");
  // set accelerometer range to +-8G
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  // set gyro range to +- 500 deg/s
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  // set filter bandwidth to 21 Hz
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  delay(1000);

  Serial.print("Temp,x,y,z,sound");
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 

  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  /* Print out the readings */
  //Serial.print("Acceleration X: ");
  Serial.print("Temp= ");
  Serial.print(temp.temperature);
  Serial.print(" ,Accel X= ");
  Serial.print(a.acceleration.x);
  Serial.print(" ,Accel Y= ");
  //Serial.print(", Y: ");
  Serial.print(a.acceleration.y);
  Serial.print(", Accel Z= ");
  //Serial.print(", Z: ");
  Serial.print(a.acceleration.z);
  Serial.print(", Sound= ");
  delay(100);

  accel_x = a.acceleration.x;
  accel_y = a.acceleration.y;
  accel_z = a.acceleration.z;
  sound = analogRead(KY_037);
  Serial.println(sound);
  position = Location(12.8124, 80.2299);
  
  
}


/*
  Since AccelX is READ_WRITE variable, onAccelXChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAccelXChange()  {
  // Add your code here to act upon AccelX change
}

/*
  Since AccelY is READ_WRITE variable, onAccelYChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAccelYChange()  {
  // Add your code here to act upon AccelY change
}





/*
  Since AccelZ is READ_WRITE variable, onAccelZChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAccelZChange()  {
  // Add your code here to act upon AccelZ change
}

/*
  Since Temp is READ_WRITE variable, onTempChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTempChange()  {
  // Add your code here to act upon Temp change
}


/*
  Since Position is READ_WRITE variable, onPositionChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPositionChange()  {
  // Add your code here to act upon Position change
}






/*
  Since Vibrations is READ_WRITE variable, onVibrationsChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onVibrationsChange()  {
  // Add your code here to act upon Vibrations change
}



/*
  Since Sound is READ_WRITE variable, onSoundChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSoundChange()  {
  // Add your code here to act upon Sound change
}